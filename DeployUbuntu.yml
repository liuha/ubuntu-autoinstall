---
- hosts: localhost
  name: DeployUbuntu.yml
  vars_files:
    - variables.yml
  gather_facts: false
  tasks:
    - name: Create working directory on Ansible Controller
      ansible.builtin.file:
        path: "{{ Global.Workingdir }}"
        state: directory
        mode: "755"


    - name: Check if Ubuntu ISO exists locally on Ansible Controller
      ansible.builtin.stat:
        path: "{{ Global.Workingdir }}/{{ Global.UbuntuISO }}"
      register: installerfilecheck


    - name: Download Ubuntu ISO if ISO file doesn't exist locally
      ansible.builtin.get_url:
        url: "{{ Global.UbuntuISO_URL }}{{ Global.UbuntuISO }}"
        dest: "{{ Global.Workingdir }}/{{ Global.UbuntuISO }}"
        mode: "755"
      when:
        - not installerfilecheck.stat.exists


    - name: Extract Ubuntu ISO
      ansible.builtin.command: "xorriso -osirrox on -indev {{ Global.Workingdir }}/{{ Global.UbuntuISO }} \
                               -extract / {{ Global.Workingdir }}/ISO"
      changed_when: false


    - name: Add write permission to extracted files
      ansible.builtin.command: "chmod -R +w {{ Global.Workingdir }}/ISO"    # Using chmod as Ansible (Python) can't handle the directory structure depth on the Ubuntu ISO
      changed_when: false


## Start workaround issue with Ubuntu autoinstall
## Details of the issue and the workaround: https://askubuntu.com/questions/1394441/ubuntu-20-04-3-autoinstall-with-embedded-user-data-crashing-i-got-workaround

    - name: Extract the Packages.gz file on Ubuntu ISO
      ansible.builtin.command: "gunzip -f {{ Global.Workingdir }}/ISO/dists/focal/main/binary-amd64/Packages.gz --keep"
      changed_when: false

## End workaround issue with Ubuntu autoinstall


    - name: Copy txt.cfg file(s) from Ubuntu ISO
      ansible.builtin.copy:
        src: "{{ Global.Workingdir }}/ISO/isolinux/txt.cfg"
        dest: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/isolinux/"
        mode: "775"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Edit txt.cfg to modify append line
      ansible.builtin.replace:
        dest: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/isolinux/txt.cfg"
        regexp: 'append   initrd=/casper/initrd quiet  ---'
        replace: 'append   initrd=/casper/initrd quiet --- autoinstall ds=nocloud;s=/cdrom/autoinstall/'
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Create directory to store user-data and meta-data
      ansible.builtin.file:
        path: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall"
        state: directory
        mode: "755"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Copy user-data file(s) to directory
      ansible.builtin.template:
        src: ./Ubuntu_user-data.j2
        dest: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall/user-data"
        mode: "755"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Create empty meta-data file(s)
      ansible.builtin.file:
        path: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall/meta-data"
        state: touch
        mode: "755"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Create custom Ubuntu ISO(s)
      ansible.builtin.command: "xorrisofs -relaxed-filenames -J -R -o {{ Global.Workingdir }}/{{ item.Name }}.iso \
                               -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table \
                               {{ Global.Workingdir }}/ISO/ {{ Global.Workingdir }}/ISOcopy/{{ item.Name }}"
      args:
        chdir: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}"
      changed_when: false
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Upload the custom Ubuntu ISO(s) to the vSphere datastore
      community.vmware.vsphere_copy:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        datacenter: "{{ Global.ISODatacenter }}"
        src: "{{ Global.Workingdir }}/{{ item.Name }}.iso"
        datastore: "{{ Global.ISODatastore }}"
        path: "{{ Global.ISODatastoreDir }}/{{ item.Name }}.iso"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Deploy Ubuntu VM(s)
      community.vmware.vmware_guest:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        name: "{{ item.Name }}"
        state: "{{ item.Configuration.VM.PowerState }}"
        guest_id: "{{ item.Configuration.VM.GuestID }}"
        datacenter: "{{ item.Placement.Datacenter }}"
        cluster: "{{ item.Placement.Cluster }}"
        folder: "{{ item.Placement.Folder }}"
        disk:
          - size_gb: "{{ item.Configuration.Storage.DiskSize }}"
            type: "{{ item.Configuration.Storage.DiskType }}"
            datastore: "{{ item.Placement.Datastore }}"
        hardware:
          memory_mb: "{{ item.Configuration.Compute.MemorySize }}"
          num_cpus: "{{ item.Configuration.Compute.CPUs }}"
          num_cpu_cores_per_socket: "{{ item.Configuration.Compute.Cores }}"
          scsi: "{{ item.Configuration.Storage.SCSIController }}"
        networks:
          - name: "{{ item.Configuration.Network.Portgroup }}"
            device_type: "{{ item.Configuration.Network.NetworkAdapter }}"
        cdrom:
          - controller_number: 0
            unit_number: 0
            type: iso
            iso_path: "[{{ Global.ISODatastore }}] {{ Global.ISODatastoreDir }}/{{ item.Name }}.iso"
            state: present
        annotation: |
                    *** Auto-Deployed by Ansible ***
                    Username: {{ item.Configuration.OS.User }}
                    Password: {{ item.Configuration.OS.Password }}
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Start checking if the Ubuntu VM(s) is/are ready
      community.vmware.vmware_guest_info:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        datacenter: "{{ item.Placement.Datacenter }}"
        validate_certs: false
        name: "{{ item.Name }}"
        schema: vsphere
      register: vm_facts
      until: vm_facts.instance.guest.hostName is search(item.Configuration.OS.Hostname)
      retries: 30
      delay: 60
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Set password for the Ubuntu user
      community.vmware.vmware_vm_shell:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        vm_id: "{{ item.Name }}"
        vm_username: "{{ item.Configuration.OS.User }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/echo
        vm_shell_args: "'{{ item.Configuration.OS.User }}:{{ item.Configuration.OS.Password }}' | sudo chpasswd"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Copy network configuration file(s) to working directory
      ansible.builtin.template:
        src: ./Ubuntu_Netplan.j2
        dest: "{{ Global.Workingdir }}/{{ item.Name }}-00-installer-config.yaml"
        mode: "755"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Copy network configuration file(s) to Ubuntu VM(s)
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        vm_id: "{{ item.Name }}"
        vm_username: "{{ item.Configuration.OS.User }}"
        vm_password: VMware1!
        copy:
          src: "{{ Global.Workingdir }}/{{ item.Name }}-00-installer-config.yaml"
          dest: "/home/{{ item.Configuration.OS.User }}/{{ item.Name }}-00-installer-config.yaml"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Move network configuration file to correct location on Ubuntu VM(s)
      community.vmware.vmware_vm_shell:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        vm_id: "{{ item.Name }}"
        vm_username: "{{ item.Configuration.OS.User }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ item.Configuration.OS.User }}/{{ item.Name }}-00-installer-config.yaml /etc/netplan/00-installer-config.yaml"
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy


    - name: Appply the network configuration on Ubuntu VM(s)
      community.vmware.vmware_vm_shell:
        hostname: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        vm_id: "{{ item.Name }}"
        vm_username: "{{ item.Configuration.OS.User }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/sudo
        vm_shell_args: netplan apply
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy

    - name: Delete custom Ubuntu ISO(s) from the datastore
      community.vmware.vsphere_file:
        host: "{{ vCenter.FQDN }}"
        username: "{{ vCenter.User }}"
        password: "{{ vCenter.Password }}"
        validate_certs: false
        datacenter: "{{ Global.ISODatacenter }}"
        datastore: "{{ Global.ISODatastore }}"
        path: "{{ Global.ISODatastoreDir }}/{{ item.Name }}.iso"
        state: absent
      loop: "{{ VMsToDeploy }}"
      when: item.Deploy

    - name: Delete working directory on Ansible Controller
      ansible.builtin.file:
        path: "{{ Global.Workingdir }}"
        state: absent
